//ÁªôÂÆö‰∏Ä‰∏™ÂçïÈìæË°® LÔºöL0‚ÜíL1‚Üí‚Ä¶‚ÜíLn-1‚ÜíLn Ôºå 
//Â∞ÜÂÖ∂ÈáçÊñ∞ÊéíÂàóÂêéÂèò‰∏∫Ôºö L0‚ÜíLn‚ÜíL1‚ÜíLn-1‚ÜíL2‚ÜíLn-2‚Üí‚Ä¶ 
//
// ‰Ω†‰∏çËÉΩÂè™ÊòØÂçïÁ∫ØÁöÑÊîπÂèòËäÇÁÇπÂÜÖÈÉ®ÁöÑÂÄºÔºåËÄåÊòØÈúÄË¶ÅÂÆûÈôÖÁöÑËøõË°åËäÇÁÇπ‰∫§Êç¢„ÄÇ 
//
// Á§∫‰æã 1: 
//
// ÁªôÂÆöÈìæË°® 1->2->3->4, ÈáçÊñ∞ÊéíÂàó‰∏∫ 1->4->2->3. 
//
// Á§∫‰æã 2: 
//
// ÁªôÂÆöÈìæË°® 1->2->3->4->5, ÈáçÊñ∞ÊéíÂàó‰∏∫ 1->5->2->4->3. 
// Related Topics ÈìæË°® 
// üëç 520 üëé 0


package com.martin.leetcode.editor.cn;


public class ReorderList{
    public static void main(String[] args) {
       Solution solution = new ReorderList().new Solution();
    }
    
    //leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
public class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}
class Solution {
    public void reorderList(ListNode head) {
        ListNode slow = new ListNode();
        slow.next = head;
        ListNode quick = new ListNode();
        quick.next = head;
        while (quick != null && quick.next != null) {
            slow = slow.next;
            quick = quick.next.next;
        }
        ListNode left = head;
        ListNode right = reverse(slow.next);
        slow.next = null;
        while (right != null) {
            ListNode cur = right;
            right = right.next;
            ListNode next = left.next;
            left.next = cur;
            cur.next = next;
            left = next;
        }
    }

    private ListNode reverse(ListNode head) {
        if (head == null || head.next == null) return head;

        ListNode last = reverse(head.next);
        head.next.next = head;
        head.next = null;

        return last;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}
